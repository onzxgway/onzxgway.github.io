<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OnZXGWay</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-02-22T13:16:26.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>朱献国</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS并发编程</title>
    <link href="http://yoursite.com/2017/02/22/iOS%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2017/02/22/iOS并发编程/</id>
    <published>2017-02-22T10:21:56.000Z</published>
    <updated>2017-02-22T13:16:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>并发描述的概念是同时有多个任务在执行，这些任务在单核CPU上以分时的形式在运行（宏观上可以看成多个任务同时执行），而在多核CPU上才是真正的同时执行。在iOS开发中，Apple提供了四种API(pthread,NSThread,GCD,NSOperation)用于并发编程。本文主要讲解四种API的使用方法，优缺点和注意事项。</p>
<p>在学习并发编程之前，首先我们要知道线程的概念，以及线程的一些相关基础知识，这是学习并发编程的基础。</p>
<p>一：什么是线程？<br>    线程（thread）是进程的基本单位，一个进程包含一个或多个线程（至少包含一个），操作系统的调度器可以直接调度线程。所有的并发编程API都是构建在线程上的。</p>
<p>二：线程的状态：<br>    <img src="http://ols16w547.bkt.clouddn.com/Screen%20Shot%202017-02-22%20at%209.04.58%20PM.png" alt="Screen%20Shot%202017-02-22%20at%209.04.58%20PM"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;并发描述的概念是同时有多个任务在执行，这些任务在单核CPU上以分时的形式在运行（宏观上可以看成多个任务同时执行），而在多核CPU上才是真正的同时执行。在iOS开发中，Apple提供了四种API(pthread,NSThread,GCD,NSOperation)用于并发编程。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2013/07/26/README/"/>
    <id>http://yoursite.com/2013/07/26/README/</id>
    <published>2013-07-26T08:39:11.000Z</published>
    <updated>2013-07-26T08:39:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="markdown-js"><a href="#markdown-js" class="headerlink" title="markdown-js"></a>markdown-js</h1><p>Yet another markdown parser, this time for JavaScript. There’s a few<br>options that precede this project but they all treat markdown to HTML<br>conversion as a single step process. You pass markdown in and get HTML<br>out, end of story. We had some pretty particular views on how the<br>process should actually look, which include:</p>
<ul>
<li><p>producing well-formed HTML. This means that <code>em</code> and <code>strong</code> nesting<br>is important, as is the ability to output as both HTML and XHTML</p>
</li>
<li><p>having an intermediate representation to allow processing of parsed<br>data (we in fact have two, both <a href="http://jsonml.org/" title="JSON Markup Language" target="_blank" rel="external">JsonML</a>: a markdown tree and an HTML tree)</p>
</li>
<li><p>being easily extensible to add new dialects without having to<br>rewrite the entire parsing mechanics</p>
</li>
<li><p>having a good test suite. The only test suites we could find tested<br>massive blocks of input, and passing depended on outputting the HTML<br>with exactly the same whitespace as the original implementation</p>
</li>
</ul>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Just the <code>markdown</code> library:</p>
<pre><code>npm install markdown
</code></pre><p>Optionally, install <code>md2html</code> into your path</p>
<pre><code>npm install -g markdown
</code></pre><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>The simple way to use it with node is:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> markdown = <span class="built_in">require</span>( <span class="string">"markdown"</span> ).markdown;</div><div class="line"><span class="built_in">console</span>.log( markdown.toHTML( <span class="string">"Hello *World*!"</span> ) );</div></pre></td></tr></table></figure>
<h3 id="Browser"><a href="#Browser" class="headerlink" title="Browser"></a>Browser</h3><p>It also works in a browser; here is a complete example:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">"text-input"</span> <span class="attr">oninput</span>=<span class="string">"this.editor.update()"</span></span></div><div class="line">              <span class="attr">rows</span>=<span class="string">"6"</span> <span class="attr">cols</span>=<span class="string">"60"</span>&gt;Type **Markdown** here.<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"preview"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/markdown.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">Editor</span>(<span class="params">input, preview</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.update = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">          preview.innerHTML = markdown.toHTML(input.value);</div><div class="line">        &#125;;</div><div class="line">        input.editor = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">this</span>.update();</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">var</span> $ = <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id); &#125;;</div><div class="line">      <span class="keyword">new</span> Editor($(<span class="string">"text-input"</span>), $(<span class="string">"preview"</span>));</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Command-line"><a href="#Command-line" class="headerlink" title="Command line"></a>Command line</h3><p>Assuming you’ve installed the <code>md2html</code> script (see Installation,<br>above), you can convert markdown to html:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># read from a file</span></div><div class="line">md2html /path/to/doc.md &gt; /path/to/doc.html</div><div class="line"></div><div class="line"><span class="comment"># or from stdin</span></div><div class="line"><span class="built_in">echo</span> <span class="string">'Hello *World*!'</span> | md2html</div></pre></td></tr></table></figure>
<h3 id="More-options"><a href="#More-options" class="headerlink" title="More options"></a>More options</h3><p>If you want more control check out the documentation in<br><a href="http://github.com/evilstreak/markdown-js/blob/master/lib/markdown.js" target="_blank" rel="external">lib/markdown.js</a> which details all the methods and parameters<br>available (including examples!). One day we’ll get the docs generated<br>and hosted somewhere for nicer browsing.</p>
<p>Meanwhile, here’s an example of using the multi-step processing to<br>make wiki-style linking work by filling in missing link references:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> md = <span class="built_in">require</span>( <span class="string">"markdown"</span> ).markdown,</div><div class="line">    text = <span class="string">"[Markdown] is a simple text-based [markup language]\n"</span> +</div><div class="line">           <span class="string">"created by [John Gruber]\n\n"</span> +</div><div class="line">           <span class="string">"[John Gruber]: http://daringfireball.net"</span>;</div><div class="line"></div><div class="line"><span class="comment">// parse the markdown into a tree and grab the link references</span></div><div class="line"><span class="keyword">var</span> tree = md.parse( text ),</div><div class="line">    refs = tree[ <span class="number">1</span> ].references;</div><div class="line"></div><div class="line"><span class="comment">// iterate through the tree finding link references</span></div><div class="line">( <span class="function"><span class="keyword">function</span> <span class="title">find_link_refs</span>(<span class="params"> jsonml </span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> ( jsonml[ <span class="number">0</span> ] === <span class="string">"link_ref"</span> ) &#123;</div><div class="line">    <span class="keyword">var</span> ref = jsonml[ <span class="number">1</span> ].ref;</div><div class="line"></div><div class="line">    <span class="comment">// if there's no reference, define a wiki link</span></div><div class="line">    <span class="keyword">if</span> ( !refs[ ref ] ) &#123;</div><div class="line">      refs[ ref ] = &#123;</div><div class="line">        <span class="attr">href</span>: <span class="string">"http://en.wikipedia.org/wiki/"</span> + ref.replace(<span class="regexp">/\s+/</span>, <span class="string">"_"</span> )</div><div class="line">      &#125;;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">Array</span>.isArray( jsonml[ <span class="number">1</span> ] ) ) &#123;</div><div class="line">    jsonml[ <span class="number">1</span> ].forEach( find_link_refs );</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">Array</span>.isArray( jsonml[ <span class="number">2</span> ] ) ) &#123;</div><div class="line">    jsonml[ <span class="number">2</span> ].forEach( find_link_refs );</div><div class="line">  &#125;</div><div class="line">&#125; )( tree );</div><div class="line"></div><div class="line"><span class="comment">// convert the tree into html</span></div><div class="line"><span class="keyword">var</span> html = md.renderJsonML( md.toHTMLTree( tree ) );</div><div class="line"><span class="built_in">console</span>.log( html );</div></pre></td></tr></table></figure>
<h2 id="Intermediate-Representation"><a href="#Intermediate-Representation" class="headerlink" title="Intermediate Representation"></a>Intermediate Representation</h2><p>Internally the process to convert a chunk of markdown into a chunk of<br>HTML has three steps:</p>
<ol>
<li><p>Parse the markdown into a JsonML tree. Any references found in the<br>parsing are stored in the attribute hash of the root node under the<br>key <code>references</code>.</p>
</li>
<li><p>Convert the markdown tree into an HTML tree. Rename any nodes that<br>need it (<code>bulletlist</code> to <code>ul</code> for example) and lookup any references<br>used by links or images. Remove the references attribute once done.</p>
</li>
<li><p>Stringify the HTML tree being careful not to wreck whitespace where<br>whitespace is important (surrounding inline elements for example).</p>
</li>
</ol>
<p>Each step of this process can be called individually if you need to do<br>some processing or modification of the data at an intermediate stage.<br>For example, you may want to grab a list of all URLs linked to in the<br>document before rendering it to HTML which you could do by recursing<br>through the HTML tree looking for <code>a</code> nodes.</p>
<h2 id="Running-tests"><a href="#Running-tests" class="headerlink" title="Running tests"></a>Running tests</h2><p>To run the tests under node you will need tap installed (it’s listed as a<br><code>devDependencies</code> so <code>npm install</code> from the checkout should be enough), then do</p>
<pre><code>$ npm test
</code></pre><h2 id="Contributing"><a href="#Contributing" class="headerlink" title="Contributing"></a>Contributing</h2><p>Do the usual github fork and pull request dance. Add yourself to the<br>contributors section of <a href="/package.json">package.json</a> too if you want to.</p>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>Released under the MIT license.</p>
<p>Permission is hereby granted, free of charge, to any person obtaining a copy of<br>this software and associated documentation files (the “Software”), to deal in<br>the Software without restriction, including without limitation the rights to<br>use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of<br>the Software, and to permit persons to whom the Software is furnished to do so,<br>subject to the following conditions:</p>
<p>The above copyright notice and this permission notice shall be included in all<br>copies or substantial portions of the Software.</p>
<p>THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR<br>IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS<br>FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR<br>COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER<br>IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN<br>CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;markdown-js&quot;&gt;&lt;a href=&quot;#markdown-js&quot; class=&quot;headerlink&quot; title=&quot;markdown-js&quot;&gt;&lt;/a&gt;markdown-js&lt;/h1&gt;&lt;p&gt;Yet another markdown parser, this 
    
    </summary>
    
    
  </entry>
  
</feed>
